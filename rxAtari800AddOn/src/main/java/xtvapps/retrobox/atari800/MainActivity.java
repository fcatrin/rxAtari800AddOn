// This string is autogenerated by ChangeAppSettings.sh, do not change spaces amount
package xtvapps.retrobox.atari800;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import com.tvi910.android.core.AccelerometerJoystick;
import com.tvi910.android.core.Keymap;
import com.tvi910.android.core.TouchpadJoystick;
import com.tvi910.android.core.VirtualControllerManager;
import com.tvi910.android.core.buttonpanel.ButtonCallback;
import com.tvi910.android.core.buttonpanel.ButtonPanel;
import com.tvi910.android.sdl.AudioThread;
import com.tvi910.android.sdl.DemoRenderer;
import com.tvi910.android.sdl.LoadLibrary;
import com.tvi910.android.sdl.SDLInterface;
import com.tvi910.android.sdl.SDLKeysym;
import com.tvi910.android.sdl.SDLSurfaceView;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ActivityInfo;
import android.content.res.Configuration;
import android.graphics.Color;
import android.media.AudioManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.PowerManager;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.Display;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.view.Window;
import android.view.WindowManager;
import android.widget.AbsoluteLayout;
import android.widget.TextView;
import android.widget.Toast;
import retrobox.content.SaveStateInfo;
import retrobox.keyboard.KeyboardLayout;
import retrobox.keyboard.KeyboardMappingUtils;
import retrobox.keyboard.layouts.Atari800KeyboardLayout;
import retrobox.utils.GamepadInfoDialog;
import retrobox.utils.ImmersiveModeSetter;
import retrobox.utils.ListOption;
import retrobox.utils.RetroBoxDialog;
import retrobox.utils.RetroBoxUtils;
import retrobox.utils.SaveStateSelectorAdapter;
import retrobox.vinput.AnalogGamepad;
import retrobox.vinput.AnalogGamepad.Axis;
import retrobox.vinput.AnalogGamepadListener;
import retrobox.vinput.GamepadDevice;
import retrobox.vinput.GamepadMapping.Analog;
import retrobox.vinput.KeyTranslator;
import retrobox.vinput.Mapper;
import retrobox.vinput.Mapper.ShortCut;
import retrobox.vinput.QuitHandler;
import retrobox.vinput.QuitHandler.QuitHandlerCallback;
import retrobox.vinput.VirtualEvent.MouseButton;
import retrobox.vinput.VirtualEventDispatcher;
import retrobox.vinput.overlay.ExtraButtons;
import retrobox.vinput.overlay.ExtraButtonsController;
import retrobox.vinput.overlay.ExtraButtonsView;
import retrobox.vinput.overlay.Overlay;
import retrobox.vinput.overlay.OverlayExtra;
import retrobox.vinput.overlay.OverlayGamepadController;
import retrobox.vinput.overlay.OverlayGamepadView;
import xtvapps.core.AndroidFonts;
import xtvapps.core.Callback;
import xtvapps.core.SimpleCallback;
import xtvapps.core.content.KeyValue;
import xtvapps.retrobox.v2.atari800.R;

public class MainActivity extends Activity {

	private static final String LOGTAG = MainActivity.class.getSimpleName();
    private static MainActivity _instance = null;
    public static Context ctx;
    public static final String TAG = "com.droid800.emulator";
    public static final Overlay overlay = new Overlay();
    private static int saveSlot = 0;
	private GamepadInfoDialog gamepadInfoDialog;
    AnalogGamepad analogGamepad;

    List<String> disks = new ArrayList<String>();

    private static class ButtonInfo {
        String name;
        int colspan;
        ButtonCallback callback;

        ButtonInfo(String name, ButtonCallback callback, int colspan) {
            this.name = name;
            this.colspan = colspan;
            this.callback = callback;
        }
    }

    public static class QuitEmulatorCallback implements ButtonCallback {
        QuitEmulatorCallback() {
        }
        public void onButtonUp() {
            MainActivity.getInstance().uiQuitConfirm();
        }   
    }

    public static class NormalCallback implements ButtonCallback {
        public int _keyCode;
        public boolean _closePanel;
        NormalCallback(int keyCode, boolean closePanel) {
            _keyCode = keyCode;
            _closePanel = closePanel;
        }
        public void onButtonUp() {
            SDLInterface.nativeKeyCycle(_keyCode);
            if (_closePanel) {
                MainActivity.getInstance().hideControlPanel();
            }
        }   
    }

    public static class DelayCallback implements ButtonCallback {
        public int _keyCode;
        public boolean _closePanel;
        DelayCallback(int keyCode, boolean closePanel) {
            _keyCode = keyCode;
            _closePanel = closePanel;
        }
        public void onButtonUp() {
            SDLInterface.nativeKeyCycle(_keyCode, 200);
            if (_closePanel) {
                MainActivity.getInstance().hideControlPanel();
            }
        }   
    }

    /**
     * list of ButtonPanel button attributes and toggles (if there is one) 
     */
    private static final ButtonInfo[] panelButtons = {
        new ButtonInfo("Reset", new DelayCallback(SDLKeysym.SDLK_F5,false), 1),
        null,
        new ButtonInfo("Option", new DelayCallback(SDLKeysym.SDLK_F2,false), 1),
        null,
        new ButtonInfo("Select", new DelayCallback(SDLKeysym.SDLK_F3,false), 1),
        null,
        new ButtonInfo("Start", new DelayCallback(SDLKeysym.SDLK_F4,true), 1),
        null,
        new ButtonInfo("Quit", new QuitEmulatorCallback(), 1),
        null,
        new ButtonInfo("F1", new NormalCallback(SDLKeysym.SDLK_F1,true), 1),
        null,
        new ButtonInfo("Escape", new NormalCallback(SDLKeysym.SDLK_ESCAPE,true), 1),
        null,
        new ButtonInfo("Break", new NormalCallback(SDLKeysym.SDLK_F7,true), 1),
        null,
        null,
        null
    };

    public static MainActivity getInstance() {
        return _instance;
    }

	private static Mapper mapper;
	private VirtualInputDispatcher vinputDispatcher;
	private String stateDir;
	private String stateName;
	private CustomKeyboard customKeyboard;
    
	
	@Override
	public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
        Log.d("FOCUS", "onFocusChanged " + hasFocus);
        
        if (hasFocus) ImmersiveModeSetter.postImmersiveMode(new Handler(), getWindow(), useStableLayout());
	}

	private void setImmersiveMode() {
		ImmersiveModeSetter.get().setImmersiveMode(getWindow(), useStableLayout());
	}
	
	private boolean useStableLayout() {
		return false;
	}
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
				
		ctx = this;
        _instance = this;

        _lowerMode = false;

        AtariKeys.init();
		super.onCreate(savedInstanceState);
        
        Intent intent = getIntent();
        String romFile = intent.getStringExtra("game");
        String shotsDir = intent.getStringExtra("shotsDir");
        String stateDir = intent.getStringExtra("stateDir");
        String stateName = intent.getStringExtra("stateName");
        String machine = intent.getStringExtra("machine");
        String osromDir = intent.getStringExtra("osromDir");
        String videoSystem = intent.getStringExtra("videoSystem");
        boolean keepAspect = intent.getBooleanExtra("keepAspect", true);
        boolean stereo = intent.getBooleanExtra("stereo", false);
        
        disks.clear();
        for(int i=1; i<=8; i++) {
        	String disk = intent.getStringExtra("disk" + i);
        	if (disk!=null) disks.add(disk);
        }
        
        if (stateDir!=null) new File(stateDir).mkdirs();
		
		SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);
	    SharedPreferences.Editor editor = preferences.edit();
	    editor.putString("osromDir", osromDir);
	    editor.putString("romfile", romFile);
	    editor.putString("shotsDir", shotsDir);
	    editor.putString("stateDir", stateDir);
	    editor.putString("stateName", stateName);
	    editor.putString("machine", machine);
	    editor.putString("videoSystem", videoSystem);
	    editor.putBoolean("keepAspect", keepAspect);
	    editor.putBoolean("stereo", stereo);
	    editor.commit();
	    
	    Log.d(TAG,  "Set machine:" + machine);
	    
		// fullscreen mode
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);

		setImmersiveMode();
		
        // lock orientation 
        boolean landscapeMode =
            PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getBoolean("landscape", true);
        if (landscapeMode) {
            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE);
        }
        else {
            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        }

        _keymap = Keymap.getInstance();

        if (_keymap.getNumberOfMappedKeys() == 0) {
        	Log.d(TAG, "Using AtariKeys");
            _keymap.reload(PreferenceManager.getDefaultSharedPreferences(this), AtariKeys.getInstance());
        } else {
        	Log.d(TAG, "NOT Using AtariKeys");
        }
        
        KeyTranslator.init();
        CustomKeyboard.initKeyMap();
                
        vinputDispatcher = new VirtualInputDispatcher();
        mapper = new Mapper(getIntent(), vinputDispatcher);
        Mapper.initGestureDetector(this);
        
        SDLInterface.setLeftKeycode(SDLKeysym.SDLK_JOY_0_LEFT) ;
        SDLInterface.setRightKeycode(SDLKeysym.SDLK_JOY_0_RIGHT) ;
        SDLInterface.setUpKeycode(SDLKeysym.SDLK_JOY_0_UP);
        SDLInterface.setDownKeycode(SDLKeysym.SDLK_JOY_0_DOWN) ;
        SDLInterface.setTriggerKeycode(SDLKeysym.SDLK_JOY_0_TRIGGER) ;

        extraButtonsView = new ExtraButtonsView(this);
        overlayGamepadView = new OverlayGamepadView(this, overlay);
        
    	analogGamepad = new AnalogGamepad(0, 0, new AnalogGamepadListener() {
			
			@Override
			public void onMouseMoveRelative(float mousex, float mousey) {}
			
			@Override
			public void onMouseMove(int mousex, int mousey) {}
			
			@Override
			public void onAxisChange(GamepadDevice gamepad, float axisx, float axisy, float hatx, float haty, float raxisx, float raxisy) {
				vinputDispatcher.sendAnalog(gamepad, Analog.LEFT, axisx, axisy, hatx, haty);
			}
			
			@Override
			public void onTriggers(String deviceName, int deviceId, boolean left, boolean right) {
				mapper.handleTriggerEventByDeviceName(deviceName, deviceId, left, right); 
			}

			@Override
			public void onDigitalX(GamepadDevice gamepad, Axis axis, boolean on) {
			}

			@Override
			public void onDigitalY(GamepadDevice gamepad, Axis axis, boolean on) {
			}

			@Override
			public void onTriggersAnalog(GamepadDevice gamepad, int deviceId, float left, float right) {}

		});

        
        if (landscapeMode) {
            _buttonPanel = new ButtonPanel(
                this, // context
                null, /*Typeface.createFromAsset(getAssets(), "fonts/ATARCC__.TTF"),*/ // custom font
                4, // number of grid columns
                2, // number of grid rows
                90, // percent of desired width fill
                50, // percent of desired height fill
                50, // x offset (0 = center)
                10, // y offset (0 = center)
                3f, // aspect ratio (1=square)
                2); 
            _buttonPanel.setPadding(.50f);

            for (int col=0; col<4; col++) {
                for (int row=0; row<2; row++) {
                    final int fcol = col;
                    final int frow = row;
                    ButtonInfo bi = panelButtons[((4*row)+col)*2];
                    ButtonInfo tog = panelButtons[(((4*row)+col)*2)+1];
                    if (null != bi) {
                        _buttonPanel.setButton(fcol,frow,
                            Color.argb(192, 38, 38, 38), 
                            Color.argb(192, 228, 228, 228), 
                            bi.name, 
                            bi.callback,
                            bi.colspan);
                    }
                    if (null != tog) {
                        _buttonPanel.setToggle(fcol,frow,
                            Color.argb(192, 38, 38, 38), 
                            Color.argb(192, 228, 228, 228), 
                            tog.name, 
                            tog.callback);
                    }
                }
            }
        }
        else {
            _buttonPanel = new ButtonPanel(
                this, // context
                null, /*Typeface.createFromAsset(getAssets(), "fonts/ATARCC__.TTF"),*/ // custom font
                3, // number of grid columns
                3, // number of grid rows
                95, // percent of desired width fill
                35, // percent of desired height fill
                50, // x offset (0 = center)
                60, // y offset (0 = center)
                2.5f, // aspect ratio (1=square)
                2); 

            _buttonPanel.setPadding(.85f);

            for (int col=0; col<3; col++) {
                for (int row=0; row<3; row++) {
                    final int fcol = col;
                    final int frow = row;
                    ButtonInfo bi = panelButtons[((3*row)+col)*2];
                    ButtonInfo tog = panelButtons[(((3*row)+col)*2)+1];
                    if (null != bi) {
                        _buttonPanel.setButton(fcol,frow,
                            Color.argb(192, 38, 38, 38), 
                            Color.argb(192, 228, 228, 228), 
                            bi.name, 
                            bi.callback,
                            bi.colspan);
                    }
                    if (null != tog) {
                        _buttonPanel.setToggle(fcol,frow,
                            Color.argb(192, 38, 38, 38), 
                            Color.argb(192, 228, 228, 228), 
                            tog.name, 
                            tog.callback);
                    }
                }
            }
        }
        _buttonPanel.setPanelButtonCallback(buttonPanelCallback);

		mLoadLibraryStub = new LoadLibrary();
		mAudioThread = new AudioThread(this);

		boolean isInvertedRGB = getIntent().getBooleanExtra("invertRGB", false);
		DemoRenderer.nativeSetInvertRGB(isInvertedRGB);
		
        initSDL(landscapeMode);
        this.setVolumeControlStream(AudioManager.STREAM_MUSIC);
        
        ViewTreeObserver observer = mGLView.getViewTreeObserver();
		observer.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {

	        public void onGlobalLayout() {
	        	int w = mGLView.getWidth();
	        	int h = mGLView.getHeight();
	        	String overlayConfig = getIntent().getStringExtra("OVERLAY");
				float alpha = getIntent().getFloatExtra("OVERLAY_ALPHA", 0.8f);
	        	if (overlayConfig!=null) overlay.init(overlayConfig, w, h, alpha);

	            ExtraButtons.initExtraButtons(MainActivity.this, getIntent().getStringExtra("buttons"), mGLView.getWidth(), mGLView.getHeight(), true);
	        }
	    });
        
		customKeyboard = new CustomKeyboard(this);
	}

	public void initSDL(boolean landscapeMode)
	{
		if(sdlInited)
			return;
		sdlInited = true;

        Display display = getWindowManager().getDefaultDisplay();

        AbsoluteLayout al = new AbsoluteLayout(this);
        setContentView(al);

        boolean needsBasic = getIntent().getBooleanExtra("basic", false);

        // set up the sdl command line args.
        String systemType = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getString("machine", "800XL");
        String gameRom = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getString("romfile","");
        
        if (!systemType.equals("5200")) {
            gameRom = Cartridge.getInstance().prepareCartridge(gameRom);
        }
        String osromDir =  PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getString("osromDir", "");
        String shotsDir =  PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getString("shotsDir",null);
        stateDir =  PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getString("stateDir",null);
        stateName =  PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getString("stateName",null);
        String refreshRate = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getString("skipFrame", "0");
        boolean showSpeed = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getBoolean("showspeed", false);
        boolean enableSound = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getBoolean("sound", true);
        boolean showBorder = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getBoolean("showBorder", true);
        String sampleRate = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getString("sampleRate", "44100");
        boolean keepAspect = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getBoolean("keepAspect", true);
        boolean stereo = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getBoolean("stereo", false);
        boolean ntscMode = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getString("videoSystem", "NTSC").equals("NTSC");
        String leftController = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getString("leftControllerId", "Gamepad");
        setupVirtualControllers(landscapeMode);

        ArrayList<String> arglist = new ArrayList<String>();
        arglist.add("atari800");
        if (showSpeed) {
            arglist.add("-showspeed");
        }
        
        int refreshRateInt = Integer.parseInt(refreshRate);
        if (refreshRateInt > 0) {
            arglist.add("-refresh");
            arglist.add("" + refreshRateInt);
        }

        if (keepAspect) arglist.add("-keepaspectratio");
        if (showBorder) arglist.add("-showborder");

        if (!enableSound) {
            arglist.add("-nosound");
        }
        
        if (stereo) {
        	arglist.add("-stereo");
        }
        
        arglist.add("-dsprate");
        arglist.add(sampleRate);
        arglist.add("-audio16");
      
        if (ntscMode) {
            arglist.add("-ntsc");
        }


        if (systemType.equals("5200")) {
        	String osROM = osromDir + "/5200.ROM";
            arglist.add("-5200");
            arglist.add("-5200_rom");
            arglist.add(osROM);
            
            boolean a5200CartridgeOneChip = getIntent().getBooleanExtra("5200OneChip", false);
            if (a5200CartridgeOneChip) {
            	arglist.add("-5200_one_chip");
            }
        }
        else if (systemType.equals("800a")) {
        	String osROM = osromDir + "/ATARIOSA.ROM";
            arglist.add("-atari");
            arglist.add("-osa_rom");
            arglist.add(osROM);
        }
        else if (systemType.equals("800b")) {
        	String osROM = osromDir + "/ATARIOSB.ROM";
            arglist.add("-atari");
            arglist.add("-osb_rom");
            arglist.add(osROM);
        }
        else {
            if (systemType.equals("800XL")) {
                arglist.add("-xl");
            }
            else if (systemType.equals("130XE")) {
                arglist.add("-xe");
            }
            else if (systemType.equals("320XE")) {
                arglist.add("-320xe");
            }
            else if (systemType.equals("RAMBO")) {
                arglist.add("-RAMBO");
            }
            arglist.add("-xlxe_rom");
            
            String osROM = osromDir + "/ATARIXL.ROM";
            arglist.add(osROM);
        }
        
        if (needsBasic) {
        	arglist.add("-basic");
        	arglist.add("-basic_rom"); // this is required or the emaulator will
        	arglist.add(osromDir + "/ATARIBAS.ROM");
        } else {
        	arglist.add("-nobasic");
        	arglist.add("-basic_rom"); // this is required or the emaulator will
            arglist.add("none");       // try and load teh basic rom too
        }
        
        if (stateDir!=null && stateName!=null) {
        	arglist.add("-state_dir");
        	arglist.add(stateDir);
        	arglist.add("-state_name");
        	arglist.add(stateName);
        }
        
        if (shotsDir!=null) {
        	arglist.add("-shots_dir");
        	arglist.add(shotsDir);
        }

        String mainMedia = gameRom;
        if (!disks.isEmpty()) {
        	mainMedia = disks.get(0);
        } 
        
        if (!mainMedia.equals("")) {
            arglist.add(mainMedia);
        }

        Log.d(TAG, "Main media " + mainMedia);

        Log.d(TAG, "args" + arglist);
        
        mGLView = new SDLSurfaceView(this, arglist);
        al.addView(mGLView);
        
        if (Mapper.mustDisplayOverlayControllers())  {
            overlayGamepadView.addToLayout((ViewGroup)al);
        }

        // _buttonPanel.addToLayout((ViewGroup)al);
        //_keyboardOverlay.getButtonPanel().addToLayout((ViewGroup)al);
        extraButtonsView.addToLayout((ViewGroup)al);
        
        getLayoutInflater().inflate(R.layout.modal_dialog_list, al);
        AndroidFonts.setViewFont(findViewById(R.id.txtDialogListTitle), RetroBoxUtils.FONT_DEFAULT_M);
        
        getLayoutInflater().inflate(R.layout.virtual_keyboard, al);
        
//        _buttonPanel.showPanel();

		// Receive keyboard events
		mGLView.setFocusableInTouchMode(true);
		mGLView.setFocusable(true);
		mGLView.requestFocus();
		PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
		wakeLock = pm.newWakeLock(PowerManager.FULL_WAKE_LOCK, "Droid800 - do not dim screen");

		if (Mapper.mustDisplayOverlayControllers())  {
			_virtualControllerManager.setActiveController("Gamepad");
		}
		
        getLayoutInflater().inflate(R.layout.modal_dialog_gamepad, al);
        AndroidFonts.setViewFont(findViewById(R.id.txtGamepadInfoTop), RetroBoxUtils.FONT_DEFAULT_M);
        AndroidFonts.setViewFont(findViewById(R.id.txtGamepadInfoBottom), RetroBoxUtils.FONT_DEFAULT_M);

        gamepadInfoDialog = new GamepadInfoDialog(this);
        gamepadInfoDialog.loadFromIntent(getIntent());
        
        getLayoutInflater().inflate(R.layout.modal_dialog_savestates, al);

	}

    private void setupVirtualControllers(boolean landscapeMode) {
        _virtualControllerManager = new VirtualControllerManager();

        _accelerometerJoystick = AccelerometerJoystick.getInstance(this);
//        _touchPaddle = new TouchPaddle(this,getWindowManager().getDefaultDisplay().getHeight());
        setupTouchpadJoystick();
        //_buttonPanelController = new ButtonPanelController(this, _buttonPanel);
        //_nullController = new NullController(this);
        extraButtonsController = new ExtraButtonsControllerWrapper(this, new ExtraButtonsController(), extraButtonsView);
        gamepadController = new OverlayGamepadControllerWrapper(this, new OverlayGamepadController(), overlayGamepadView);

        int keyboardAlpha = PreferenceManager.getDefaultSharedPreferences(
            this.getApplicationContext()).getInt("keyboardAlpha", 192);
        //_keyboardOverlay = new KeyboardOverlay(this, landscapeMode, keyboardAlpha);
        //_keyboardOverlay.getButtonPanel().setPanelButtonCallback(keyboardSliderCallback);


        //_virtualControllerManager.add("Tilt Joystick", _accelerometerJoystick);
        //_virtualControllerManager.add("Control Panel", _buttonPanelController);
        //_virtualControllerManager.add("Keymap", _nullController);
        //_virtualControllerManager.add("Virtual Keyboard", _keyboardOverlay);
        //_virtualControllerManager.add("Virtual Joystick", _touchpadJoystick);
        _virtualControllerManager.add("Gamepad", gamepadController);
        _virtualControllerManager.add("Extra Buttons", extraButtonsController);
    }

    private void setupTouchpadJoystick() {

        Display display = getWindowManager().getDefaultDisplay();

        int layout = Integer.parseInt(
            PreferenceManager.getDefaultSharedPreferences(
                this.getApplicationContext()).getString("controlslayout","0"));
        boolean layoutOnTop = false;
        boolean buttonsOnLeft = true;

        switch (layout) {
            case 0:
                layoutOnTop = false;
                buttonsOnLeft = false;
                break;
            case 1:
                layoutOnTop = false;
                buttonsOnLeft = true;
                break;
            case 2:
                layoutOnTop = true;
                buttonsOnLeft = false;
                break;
            case 3:
                layoutOnTop = true;
                buttonsOnLeft = true;
                break;
            default :
                break;
        }

        int controlsSize = Integer.parseInt(
            PreferenceManager.getDefaultSharedPreferences(
                this.getApplicationContext()).getString("touchpadJoystickSize","1"));

        int sz = TouchpadJoystick.MEDIUM;
        switch (controlsSize) {
            case 0 :
                sz = TouchpadJoystick.SMALLEST;
                break;
            case 1 :
                sz = TouchpadJoystick.SMALL;
                break;
            case 2 :
                sz = TouchpadJoystick.MEDIUM;
                break;
            case 3 :
                sz = TouchpadJoystick.LARGE;
                break;
            default :
                sz = TouchpadJoystick.MEDIUM;
                break;
        }


        _touchpadJoystick  = new TouchpadJoystick(
            this, layoutOnTop, buttonsOnLeft,
            display.getWidth(), display.getHeight(), sz);
    }

	@Override
	protected void onPause() {
        Log.v("com.droid800.MainActivity", "Paused");
        /*
		if( wakeLock != null ) {
			wakeLock.release();
        }*/
		super.onPause();
		if( mGLView != null ) {
			mGLView.onPause();
        }
	}

	@Override
	protected void onResume() {
        Log.v("com.droid800.MainActivity", "Resumed");
        /*
		if( wakeLock != null ) {
			wakeLock.acquire();
        }*/
		
        super.onResume();
		
        ImmersiveModeSetter.postImmersiveMode(new Handler(), getWindow(), useStableLayout());
        
		if( mGLView != null ) {
			mGLView.onResume();
        }
	}

	@Override
	protected void onStop()
	{
        Log.v("com.droid800.MainActivity", "Stopped");

		if( mGLView != null )
			mGLView.exitApp();
		super.onStop();
		finish();
	}
	
	private void sendSaveState(boolean down) {
		SDLInterface.nativeKey(SDLKeysym.SDLK_LALT, down?1:0);
		SDLInterface.nativeKey(SDLKeysym.SDLK_s, down?1:0);
		if (!down) {
			SDLInterface.nativeSetScreenshotPath(getSaveStateScreenshotPath(saveSlot));
			sendScreenshotEvent();
		}
	}

	private String getSaveStatePath(int slot) {
		File screenshotFile = new File(stateDir, stateName + "-" + slot + ".state");
		return screenshotFile.getAbsolutePath();
	}

	private String getSaveStateScreenshotPath(int slot) {
		File screenshotFile = new File(stateDir, stateName + "-" + slot + ".png");
		return screenshotFile.getAbsolutePath();
	}

	private void sendScreenshotEvent() {
		SDLInterface.nativeKeyCycle(SDLKeysym.SDLK_F10);
	}
	
	@Override
	public boolean dispatchKeyEvent(KeyEvent event) {

		if (!RetroBoxDialog.isDialogVisible(this) 
			&& !customKeyboard.isVisible()
			&& !KeyboardMappingUtils.isKeyMapperVisible()) {

			int keyCode     = event.getKeyCode();
			boolean isDown  = event.getAction() == KeyEvent.ACTION_DOWN;
			if (mapper.handleKeyEvent(this, event, keyCode, isDown)) return true;
		}

		return super.dispatchKeyEvent(event);
	}

	@Override
	public boolean onKeyDown(int keyCode, final KeyEvent event) {

		if (RetroBoxDialog.isDialogVisible(this)) {
			return RetroBoxDialog.onKeyDown(this, keyCode, event);
		}

		if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {
			SDLInterface.nativeKey(SDLKeysym.SDLK_RETURN, 1);
			return true;
		}
		
         final int nativeCode = _keymap.translate(keyCode);
         
         if (nativeCode == SDLKeysym.SDLK_F14) {
        	 // sendLoadState(true);
        	 return true;
         }
         if (nativeCode == SDLKeysym.SDLK_F15) {
        	 //sendSaveState(true);
        	 return true;
         }
         
         if (nativeCode > 0) {
        	 Log.v("com.droid800.MainActivity", "Send native code " + nativeCode);
             SDLInterface.nativeKey(nativeCode, 1);
             return true;
         }
         else if (keyCode == 67) {
             SDLInterface.nativeKey(8, 1);
             return true;
         }
         else {
        	 Log.v("com.droid800.MainActivity", "autotranslate");
             int charCode = event.getUnicodeChar();
             if (charCode > 0) {
                 if (!_lowerMode) {
                     // clumsy work-around for the weird capslock situation in 
                     // the emulator. This is essentially pressing the "Lowr" 
                     // button on older ataris or toggling caps mode in the newer 
                     // ones.
                     _lowerMode = true;
                     SDLInterface.nativeKeyCycle(SDLKeysym.SDLK_CAPSLOCK);
                     SDLInterface.nativeKeyCycle(SDLKeysym.SDLK_CAPSLOCK);
                 }

                 // flip lower and upper
                 if (charCode >= 65) {
                     if (charCode <= 90) {
                         charCode = charCode + 32;
                     }
                     else if (charCode >= 97 && charCode <= 122) {
                         charCode = charCode - 32;
                     }
                 }

                 switch (charCode) {
                     case (10) : 
                         SDLInterface.nativeKey(13, 1); // sdk return key
                         _lastCharDown = 13;
                         return true;
                     default : 
                         SDLInterface.nativeKey(charCode, 1);
                         _lastCharDown = charCode;
                         return true;
                 }
             }
             else {
                 return false;
             }
         }
	 }

	@Override
	public boolean onKeyUp(int keyCode, final KeyEvent event) {
		if (RetroBoxDialog.isDialogVisible(this)) {
			return RetroBoxDialog.onKeyUp(this, keyCode, event);
		}
		
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			onBackPressed();
			return true;
		}
		
		if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {
			SDLInterface.nativeKey(SDLKeysym.SDLK_RETURN, 0);
			return true;
		}

         final int nativeCode = _keymap.translate(keyCode);
         
         if (nativeCode == SDLKeysym.SDLK_F14) {
        	 // sendLoadState(false);
        	 return true;
         }
         if (nativeCode == SDLKeysym.SDLK_F15) {
        	 // sendSaveState(false);
        	 return true;
         }

         if (nativeCode > 0) {
             SDLInterface.nativeKey(nativeCode, 0);
             return true;
         }
         else if (keyCode == 67) {
             SDLInterface.nativeKey(8, 0);
             return true;
         }
         else {
             final int charCode = event.getUnicodeChar();
             if (charCode > 0) {
                 SDLInterface.nativeKey(_lastCharDown, 0);
                 return true;
             }
             else {
                 return false;
             }
         }
//         else if (keyCode == 84) {
//            if (_keyboardOverlay.getButtonPanel().isVisible()) {
//                hideKeyboard();
//                return true;
//            }
//            else {
//                _virtualControllerManager.setActiveController("Virtual Keyboard");
//            }
//            return true;
//         }
	 }

    private void sleep() {
        try {
            Thread.sleep(1);
        }
        catch (Throwable e) {
        }
    }

	@Override
	public boolean dispatchTouchEvent(final MotionEvent ev) {
        if (!super.dispatchTouchEvent(ev)) {
        	if (gamepadController.getIsActive() && gamepadController.onTouchEvent(ev)) {
        		if (Overlay.requiresRedraw) {
            		Overlay.requiresRedraw = false;
        			overlayGamepadView.invalidate();
        		}
        		return true;
        	}
        	if (extraButtonsController.getIsActive() && extraButtonsController.onTouchEvent(ev)) {
        		if (OverlayExtra.requiresRedraw) {
        			OverlayExtra.requiresRedraw = false;
        			extraButtonsController.invalidate();
        		}
        		return true;
        	}
        	
        	mapper.onTouchEvent(ev);
        	
		    if(_touchpadJoystick.getIsActive()) {
			    boolean ret = _touchpadJoystick.onTouchEvent(ev);
                // if we don't sleep here we get way to many motion events.
                sleep();
                return ret;
            }
            else if (_accelerometerJoystick.getIsActive()) {
                final int action = ev.getAction();
                switch (action & MotionEvent.ACTION_MASK) {
                    case MotionEvent.ACTION_DOWN: {
                        SDLInterface.triggerOn();
                        sleep();
                        return true;
                    }
                    case MotionEvent.ACTION_UP: {   
                        SDLInterface.triggerOff(); 
                        sleep();
                        return true;
                    }
                    default : 
                        return false;
                }       
            }
            else {
                return false;
            }
        }
        else {
            return true;
        }
	}

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
    }

    /**
     * A call back for when the user presses the start button
     */
    /*
    ButtonCallback keyboardSliderCallback = new ButtonCallback() {
        public void onButtonUp() {
            if (_keyboardOverlay.getButtonPanel().isVisible()) {
                hideKeyboard();
            }
            else {
                _virtualControllerManager.setActiveController("Virtual Keyboard");
            }
        }
    };
    */

    /**
     * A call back for when the user presses the start button
     */
    ButtonCallback buttonPanelCallback = new ButtonCallback() {
        public void onButtonUp() {
            if (_buttonPanel.isVisible()) {
                hideControlPanel();
            }
            else {
                _virtualControllerManager.setActiveController("Control Panel");
            }
        }
    };

    private void hideControlPanel() {
        _virtualControllerManager.activateLastController();
    }

    private void hideKeyboard() {
        _virtualControllerManager.activateLastController();
    }
    
    private void hideExtraButtons() {
    	extraButtonsController.deactivate();
    }
    
    private void showExtrabuttons() {
    	extraButtonsController.activate();
    }

   
    public void shutdown() {
        MainActivity.this.finish();  
        SDLInterface.nativeQuit();  
    }

    // virtual controllers and manager
    private TouchpadJoystick _touchpadJoystick = null;
//    private TouchPaddle _touchPaddle = null;
    private AccelerometerJoystick _accelerometerJoystick = null;
//    private AtariKeypad _atariKeypad = null;
    //private ButtonPanelController _buttonPanelController = null;
    //private NullController _nullController = null;
    //private KeyboardOverlay _keyboardOverlay;
    private VirtualControllerManager _virtualControllerManager = null;
    private ExtraButtonsControllerWrapper extraButtonsController = null;
    private OverlayGamepadControllerWrapper gamepadController = null;


	private SDLSurfaceView mGLView = null;
	private LoadLibrary mLoadLibraryStub = null;
	private AudioThread mAudioThread = null;
	private PowerManager.WakeLock wakeLock = null;
	private boolean sdlInited = false;
    private ButtonPanel _buttonPanel;
    private ExtraButtonsView extraButtonsView;
    private OverlayGamepadView overlayGamepadView;
    private Keymap _keymap = null;
    private int _lastCharDown = 0;
    private boolean _lowerMode = false;
	private boolean buttonsVisible = false;
    
    
    protected void toastMessage(String message) {
    	Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
    }
    
	@Override
	public void onBackPressed() {
		Log.d("MENU", "on Back pressed");
		if (RetroBoxDialog.cancelDialog(this)) return;
		
		if (customKeyboard.isVisible()) {
			uiHideKeyboard();
			return;
		}

		if (KeyboardMappingUtils.isKeyMapperVisible()) {
			KeyboardMappingUtils.closeKeyMapper();
			return;
		}
		
		Log.d("MENU", "openRetroBoxMenu");
		openRetroBoxMenu(true);
	}
	
	private void uiSelectSaveState(final boolean isLoadingState) {
		List<SaveStateInfo> list = new ArrayList<SaveStateInfo>();
		for(int i=0; i<6; i++) {
			String fileName = getSaveStatePath(i);
			String fileNameShot = getSaveStateScreenshotPath(i);
			Log.d(LOGTAG, "Reading filestate from " + fileName);
			list.add(new SaveStateInfo(new File(fileName), new File(fileNameShot)));
		}
		
		final SaveStateSelectorAdapter adapter = new SaveStateSelectorAdapter(this, list, saveSlot);
		
		Callback<Integer> callback = new Callback<Integer>() {

			@Override
			public void onResult(Integer index) {
				System.out.println("setting save slot to " + index + " loading " + isLoadingState);
				boolean invalidSlot = isLoadingState && 
						!((SaveStateInfo)adapter.getItem(index)).exists();
				
				if (!invalidSlot) {
					saveSlot = index;
					if (isLoadingState) {
						uiLoadState();
					} else {
						uiSaveState();
					}
					RetroBoxDialog.cancelDialog(MainActivity.this);
				}
			}

			@Override
			public void onFinally() {
				onResume();
			}
			
		};
		
		String title = isLoadingState ?
				getString(R.string.emu_slot_load_title) :
				getString(R.string.emu_slot_save_title);
		
		RetroBoxDialog.showSaveStatesDialog(this, title, adapter, callback);
	}
	
	private void uiChangeDisk() {
		List<ListOption> options = new ArrayList<ListOption>();
		for(String disk : disks) {
			File diskFile = new File(disk);
			options.add(new ListOption(disk, diskFile.getName()));
		}
		
		RetroBoxDialog.showListDialog(this, getString(R.string.emu_disk_select), options, new Callback<KeyValue>() {
			@Override
			public void onResult(KeyValue result) {
				SDLInterface.nativeMountDisk(0, result.getKey(), 0);
				toastMessage(getString(R.string.emu_disk_inserted).replace("{name}", result.getValue()));
			}

			@Override
			public void onFinally() {
				onResume();
			}
		});
	}

	
	private void openRetroBoxMenu(boolean pause) {
		if (pause) onPause();
		
		if (customKeyboard.isVisible()) uiHideKeyboard();
		if (KeyboardMappingUtils.isKeyMapperVisible()) KeyboardMappingUtils.closeKeyMapper();
		
		List<ListOption> options = new ArrayList<ListOption>();
		
        options.add(new ListOption("", getString(R.string.emu_opt_cancel)));
        options.add(new ListOption("load", getString(R.string.emu_opt_state_load)));
        options.add(new ListOption("save", getString(R.string.emu_opt_state_save)));
        
        if (disks.size()>1) {
        	options.add(new ListOption("mount", getString(R.string.emu_opt_disk_change)));
        }
        
        if (OverlayExtra.hasExtraButtons()) {
            options.add(new ListOption("extra", getString(R.string.emu_opt_extra_buttons)));
        }
        
        options.add(new ListOption("keyboard", getString(R.string.emu_opt_open_keyboard)));
        options.add(new ListOption("keymap", getString(R.string.emu_opt_open_mapper)));
        	
        options.add(new ListOption("quit", getString(R.string.emu_opt_quit)));
        
        RetroBoxDialog.showListDialog(this, getString(R.string.emu_opt_title), options, new Callback<KeyValue>() {
			
			@Override
			public void onResult(KeyValue result) {
				String key = result.getKey();
				if (key.equals("quit")) {
					uiQuit();
					return;
				} else if (key.equals("load")) {
					uiSelectSaveState(true);
					return;
				} else if (key.equals("save")) {
					uiSelectSaveState(false);
					return;
				} else if (key.equals("extra")) {
					uiToggleButtons();
				} else if (key.equals("keyboard")) {
					uiShowKeyboard();
				} else if (key.equals("keymap")) {
					uiOpenKeyMapper();
					return;
				} else if (key.equals("mount")) {
					uiChangeDisk();
					return;
				}
				onResume();
			}

			@Override
			public void onError() {
				super.onError();
				onResume();
			}
		});
	}
	
	private void uiOpenKeyMapper() {
		if (customKeyboard.isVisible()) {
			customKeyboard.close();
		}
		
		SimpleCallback returnHereCallback = new SimpleCallback() {
			@Override
			public void onResult() {
				uiShowGamepadOverlay();
				onResume();
			}
		};
		
		uiHideGamepadOverlay(false);
		KeyboardLayout[] keyboardLayout = new Atari800KeyboardLayout().getKeyboardLayout();
		KeyboardMappingUtils.openKeymapSettings(this, keyboardLayout, returnHereCallback);
	}
	
	private void uiHideGamepadOverlay(boolean force) {
		if (Mapper.mustDisplayOverlayControllers() || force) {
			overlayGamepadView.setVisibility(View.GONE);
		}
	}
	
	private void uiShowGamepadOverlay() {
		if (Mapper.mustDisplayOverlayControllers()) {
			overlayGamepadView.setVisibility(View.VISIBLE);
		}
	}
	
	private void uiShowKeyboard() {
		uiHideGamepadOverlay(false);
		customKeyboard.open();
	}
	
	private void uiHideKeyboard() {
		uiShowGamepadOverlay();
		customKeyboard.close();
	}

	protected void uiToggleButtons() {
		buttonsVisible = !buttonsVisible ;
		if (buttonsVisible) showExtrabuttons();
		else hideExtraButtons();
	}
    
    protected void uiLoadState() {
    	NativeInterface.loadState(saveSlot);
    	toastMessage(getString(R.string.emu_slot_loaded).replace("{n}", String.valueOf(saveSlot+1)));
    }

    protected void uiSaveState() {
		SDLInterface.nativeSetScreenshotPath(getSaveStateScreenshotPath(saveSlot));
    	NativeInterface.saveState(saveSlot);
    	toastMessage(getString(R.string.emu_slot_saved).replace("{n}", String.valueOf(saveSlot+1)));
    }
    
    protected void uiHelp() {
		RetroBoxDialog.showGamepadDialogIngame(this, gamepadInfoDialog, Mapper.hasGamepads(), new SimpleCallback() {
			@Override
			public void onResult() {
				onResume();
			}
		});
    }

    protected void uiQuitConfirm() {
    	QuitHandler.askForQuit(this, new QuitHandlerCallback() {
			@Override
			public void onQuit() {
				uiQuit();
			}
		});
    }

    protected void uiQuit() {
    	shutdown();
    }
    
    @Override
	public boolean onGenericMotionEvent(MotionEvent event) {
    	if (RetroBoxDialog.isDialogVisible(this)
    		|| customKeyboard.isVisible()
    		|| KeyboardMappingUtils.isKeyMapperVisible()) {
    		return super.onGenericMotionEvent(event);
    	}
    	
		if (analogGamepad != null && analogGamepad.onGenericMotionEvent(event)) return true;
		return super.onGenericMotionEvent(event);
	}


    class VirtualInputDispatcher implements VirtualEventDispatcher {
    	private float THRESHOLD = 0.2f;

		@Override
		public void sendKey(GamepadDevice gamepad, int keyCode, boolean down) {
			SDLInterface.nativeKey(keyCode, down?1:0);
		}

		@Override
		public void sendMouseButton(MouseButton button, boolean down) {}

		@Override
		public void sendAnalog(GamepadDevice gamepad, Analog index, double x, double y, double hatx, double haty) {
			double dx = hatx!=0?hatx:x;
			double dy = haty!=0?haty:y;
			
			boolean dpadLeft = dx < -THRESHOLD;
			boolean dpadRight = dx > THRESHOLD;
			boolean dpadUp = dy < -THRESHOLD;
			boolean dpadDown = dy >THRESHOLD;
			
			gamepad.setDpad(dpadLeft, dpadRight, dpadUp, dpadDown);
			
		}

		@Override
		public boolean handleShortcut(ShortCut shortcut, boolean down) {
			switch(shortcut) {
			case EXIT: if (!down) uiQuitConfirm(); return true;
			case LOAD_STATE: if (!down) uiLoadState(); return true;
			case SAVE_STATE: if (!down) uiSaveState(); return true;
			case MENU : if (!down) openRetroBoxMenu(true); return true;
			case SCREENSHOT : sendScreenshotEvent(); return true;
			default:
				return false;
			}
		}

    }
    
}
